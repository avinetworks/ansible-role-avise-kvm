---

- name: "Avi SE | KVM | Validate Requirements"
  include: requirements.yml

- name: "Avi SE | KVM | Set the location of cloud image"
  set_fact:
    IMAGE: "/var/lib/libvirt/images/{{ kvm_vm_hostname }}.qcow2"

- name: "Avi SE | KVM | Generate the meta-data config file for VM on KVM host"
  template:
    src: avi_meta-data.j2
    dest: /root/{{ kvm_vm_hostname }}/avi_meta-data

- name: "Avi SE | KVM | Generate the user-data config file for VM"
  template:
    src: user-data.j2
    dest: /root/{{ kvm_vm_hostname }}/user-data

- name: "Avi SE | KVM | Copy se.qcow2 file into /root/{{ kvm_vm_hostname }}"
  copy:
    src: "{{ kvm_vm_base_img }}"
    dest: "/root/{{ kvm_vm_hostname }}/se.qcow2"
    remote_src: no
    owner: root
  when: kvm_vm_base_img is defined

- name: "Avi SE | KVM | Copy se.qcow2 file into /var/lib/libvirt/images/"
  copy:
    src: "/root/{{ kvm_vm_hostname }}/se.qcow2"
    dest: "{{ IMAGE }}"
    remote_src: yes
    owner: root
  when: kvm_vm_base_img is defined

- name: "Avi SE | KVM | Set the path of USER DATA file"
  set_fact:
    AVI_USER_DATA: /root/{{ kvm_vm_hostname }}/user-data

- name: "Avi SE | KVM | Set the path of META DATA file"
  set_fact:
    AVI_META_DATA: /root/{{ kvm_vm_hostname }}/avi_meta-data

- name: "Avi SE | KVM | Copy se.qcow2 file into /root/{{ kvm_vm_hostname }}"
  copy:
    src: "/root/{{ kvm_vm_hostname }}/se.qcow2"
    dest: "{{ IMAGE }}"
    remote_src: yes
    owner: root
  when: kvm_vm_base_img is undefined

- name: "Avi SE | KVM | Get interface Names from the list of kvm_virt_intf_name"
  shell: >
    ethtool -i {{ item }} | grep "bus-info" | cut -f2 -d " "
  register: intf_name
  loop: "{{ kvm_virt_intf_name }}"

- name: "Avi SE | KVM | Replace and update interface names"
  set_fact:
    data: "pci_{{ item['stdout_lines'][0]  | regex_replace('[:.]', '_') }}"
  register: updated_intf_name
  with_items: "{{ intf_name['results'] }}"

- name: "Avi SE | KVM | Generate host device string"
  set_fact:
    host_dv_str:  "{{ host_dv_str | default() }} --host-device={{ item['ansible_facts']['data'] }}"
  loop: "{{ updated_intf_name['results'] }}"

- name: "Avi SE | KVM | Generated host device string"
  debug: msg="{{ host_dv_str }}"

- name: "Avi SE | KVM | Create CD-ROM ISO with cloud-init config"
  command: >
    genisoimage -input-charset utf-8 -output {{ CI_ISO }} -volid cidata -joliet -r {{ AVI_USER_DATA }} {{ AVI_META_DATA }}
  ignore_errors: yes

- name: "Avi SE | KVM | Deploy SE | Run if os_version is greater than 17.04 OR OS is CentOS AND pinning is True"
  command: >
    virt-install --import --name {{ kvm_vm_hostname }} --ram {{ kvm_vm_ram }} --vcpus {{ kvm_vm_vcpus }} --disk {{ IMAGE }},format=qcow2,bus=virtio,size={{ kvm_vm_os_disk_size }} --check all=off --disk {{ CI_ISO }},device=cdrom --network type=direct,source={{ kvm_host_mgmt_intf }},source_mode=bridge,model=virtio --os-type=linux --os-variant=ubuntu16.04 --cpuset=auto --noautoconsole {{ host_dv_str }}
  when: 'hostvars[inventory_hostname].ansible_distribution_version | float >= 17.04 or hostvars[inventory_hostname].ansible_distribution == "CentOS" and kvm_pinning'

- name: "Avi SE | KVM | Deploy SE | If Pinning is False"
  command: > 
    virt-install --import --name {{ kvm_vm_hostname }} --ram {{ kvm_vm_ram }} --vcpus {{ kvm_vm_vcpus }} --disk {{ IMAGE }},format=qcow2,bus=virtio,size={{ kvm_vm_os_disk_size }} --check all=off --disk {{ CI_ISO }},device=cdrom --network type=direct,source={{ kvm_host_mgmt_intf }},source_mode=bridge,model=virtio --os-type=linux --os-variant=ubuntu16.04 --noautoconsole {{ host_dv_str }}
  when: not kvm_pinning

- name: "Avi SE | KVM | Eject CDROM"
  command: "virsh change-media {{ kvm_vm_hostname }} hda --eject --config"

- name: "Avi SE | KVM | Remove CI_ISO and Host files"
  command: "rm -rf /root/{{ kvm_vm_hostname }} {{ CI_ISO }}"

- name: "Avi SE | KVM | Verify SE connected to controller"
  avi_api_session:
    controller: "{{ se_kvm_ctrl_ip }}"
    username: "{{ se_kvm_ctrl_username }}"
    password: "{{ se_kvm_ctrl_password }}"
    api_version: "{{ se_kvm_ctrl_version }}"
    http_method: get
    path: serviceengine
    params:
      name: "{{ se_kvm_mgmt_ip }}"
      skip_default: true
  retries: 120
  delay: 5
  register: se_obj
  delegate_to: localhost
  until: se_obj.obj.count >= 1 and se_obj.obj.results[0].se_connected == true

- block:
  - name: Avi SE | KVM | Service deploy | Configure vnic ips
    avi_update_se_data_vnics:
      controller: "{{ se_kvm_ctrl_ip }}"
      username: "{{ se_kvm_ctrl_username }}"
      password: "{{ se_kvm_ctrl_password }}"
      api_version: "{{ se_kvm_ctrl_version }}"
      se_name: "{{ se_kvm_mgmt_ip }}"
      tenant: "{{ se_tenant }}"
      data_vnics_config: "{{ se_kvm_vnics_config }}"
    delegate_to: localhost
  when: se_kvm_vnics_config
